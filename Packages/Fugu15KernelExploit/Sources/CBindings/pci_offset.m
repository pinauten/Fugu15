#import <CoreFoundation/CoreFoundation.h>
#import <IOKit/IOKitLib.h>
#import <Foundation/Foundation.h>

uint64_t getPCIMemorySize(void)
{
	uint64_t pciMemorySize = 0;

	io_iterator_t iterator;
	kern_return_t kr;

	kr = IOServiceGetMatchingServices(kIOMainPortDefault, IOServiceMatching("IOPCIDevice"), &iterator);
	if (kr != KERN_SUCCESS) {
		printf("Error finding IOPCIDevice: %x\n", kr);
		return 0;
	}

	io_service_t service = IOIteratorNext(iterator);
	while (service) {
		io_name_t name;
		kr = IORegistryEntryGetName(service, name);
		if (kr == KERN_SUCCESS) {
			if(strcmp(name, "wlan") == 0) {
				CFMutableDictionaryRef properties;
				kr = IORegistryEntryCreateCFProperties(service, &properties, kCFAllocatorDefault, kNilOptions);
				if (kr == KERN_SUCCESS) {
					CFTypeRef memory = CFDictionaryGetValue(properties, CFSTR("IODeviceMemory"));
					if (CFGetTypeID(memory) == CFArrayGetTypeID())
					{
						NSArray* array = (__bridge id)memory;
						NSArray* fArray = array.firstObject;
						NSNumber* size = fArray.firstObject[@"length"];
						pciMemorySize = [size unsignedLongLongValue];
					}
					CFRelease(properties);
				}
			}
		}
		IOObjectRelease(service);
		service = IOIteratorNext(iterator);
	}
	IOObjectRelease(iterator);

	return pciMemorySize;
}
